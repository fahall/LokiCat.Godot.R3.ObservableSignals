// <auto-generated>
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.Text;
using LokiCat.Godot.R3.ObservableSignals.ObservableGenerator.Features.SyntaxHelpers;

namespace LokiCat.Godot.R3.ObservableSignals.ObservableGenerator.Features.Generators;

[Generator]
public sealed class RxEmitGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context) { }

    public void Execute(GeneratorExecutionContext context)
    {
        foreach (var tree in context.Compilation.SyntaxTrees)
        {
            var root = tree.GetRoot();
            var delegates = root.DescendantNodes()
                .OfType<DelegateDeclarationSyntax>()
                .Where(decl => decl.AttributeLists
                    .SelectMany(a => a.Attributes)
                    .Any(attr => attr.Name.ToString().Contains("Signal")) &&
                          decl.AttributeLists
                    .SelectMany(a => a.Attributes)
                    .Any(attr => attr.Name.ToString().Contains("RxEmit")));

            foreach (var del in delegates)
            {
                ProcessDelegate(context, del);
            }
        }
    }

    private static void ProcessDelegate(GeneratorExecutionContext context, DelegateDeclarationSyntax delegateDecl)
    {
        var classDecl = delegateDecl.Parent as ClassDeclarationSyntax;
        if (classDecl is null) return;

        var ns = Namespace.GetNamespace(classDecl);
        var className = classDecl.Identifier.Text;
        var delegateName = delegateDecl.Identifier.Text;
        if (!delegateName.EndsWith("EventHandler")) return;

        var signalName = delegateName[..^"EventHandler".Length];
        var fieldName = $"_on{signalName}";
        var connectedFlag = $"_{char.ToLowerInvariant(signalName[0])}{signalName[1..]}Connected";
        var propertyName = $"On{signalName}";

        var source = $$"""
        // <auto-generated />
        using Godot;
        using R3;
        using System.CodeDom.Compiler;

        namespace {{ns}};

        public partial class {{className}} {
          private readonly Subject<Unit> {{fieldName}} = new();
          private bool {{connectedFlag}};

          [GeneratedCode("RxEmitGenerator", "1.0.0")]
          public Observable<Unit> {{propertyName}} {
            get {
              if (!{{connectedFlag}}) {
                {{connectedFlag}} = true;
                {{fieldName}}.Subscribe(_ => EmitSignal(nameof({{signalName}}))).AddTo(this);
              }
              return {{fieldName}};
            }
          }
        }
        """;

        context.AddSource($"{className}.{propertyName}.RxEmit.g.cs", SourceText.From(source, Encoding.UTF8));
    }
}