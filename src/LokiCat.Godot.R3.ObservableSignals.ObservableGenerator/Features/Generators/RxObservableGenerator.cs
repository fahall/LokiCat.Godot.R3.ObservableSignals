using System.Text;
using LokiCat.Godot.R3.ObservableSignals.ObservableGenerator.Features.SyntaxHelpers;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace LokiCat.Godot.R3.ObservableSignals.ObservableGenerator.Features.Generators;

internal static class RxObservableGenerator
{
    internal static void Emit(
        GeneratorExecutionContext context,
        string className,
        string ns,
        string signalName,
        ParameterDefinition parameters,
        string? inverseName,
        SemanticModel model)
    {
        var fieldName = $"_on{signalName}";
        var connectedFlag = $"_{char.ToLowerInvariant(signalName[0])}{signalName[1..]}Connected";
        var propertyName = $"On{signalName}";

        var emitBody = new StringBuilder();
        emitBody.AppendLine(SignalEmitterGenerator.GetEmitCall(signalName, parameters.Count));

        if (inverseName is not null && BoolSignalCheck.IsSingleBoolParameter(parameters, model))
        {
            emitBody.AppendLine($"EmitSignal(nameof({inverseName}), !value);");
        }


        var source = $$"""
                       // <auto-generated />
                       using Godot;
                       using R3;
                       using System.CodeDom.Compiler;

                       namespace {{ns}};

                       public partial class {{className}} {
                         private readonly Subject<{{parameters.AggregateType}}> {{fieldName}} = new();
                         private bool {{connectedFlag}};

                         [GeneratedCode("SignalObservableGenerator", "1.0.0")]
                         public Observable<{{parameters.AggregateType}}> {{propertyName}} {
                           get {
                             if (!{{connectedFlag}}) {
                               {{connectedFlag}} = true;
                               {{fieldName}}.Subscribe(value => {
                                 {{emitBody.ToString().TrimEnd()}}
                               }).AddTo(this);
                             }
                             return {{fieldName}};
                           }
                         }
                       }
                       """;

        context.AddSource($"{className}.{propertyName}.g.cs", SourceText.From(source, Encoding.UTF8));
    }
}
