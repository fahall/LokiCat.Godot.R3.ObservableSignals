using System.Text;
using LokiCat.Godot.R3.ObservableSignals.ObservableGenerator.Features.SyntaxHelpers;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace LokiCat.Godot.R3.ObservableSignals.ObservableGenerator.Features.Generators;

internal static class RxObservableGenerator
{
    private const string PUBLIC_PREFIX = "Is";
    private const string PRIVATE_PREFIX = "_is";
    private const string CONNECTION_FLAG_SUFFIX = "Connected";

    internal static void Emit(
        GeneratorExecutionContext context,
        string className,
        string ns,
        string delegateName,
        ParameterDefinition parameters,
        string? inverseName,
        SemanticModel model)
    {
        var signalName = GodotSignalUtilities.GetSignalBaseName(delegateName);
        var propertyName = signalName.WithDedupedPrefix(PUBLIC_PREFIX);
        var fieldName = signalName.WithDedupedPrefix(PRIVATE_PREFIX);
        var connectedFlag = $"{fieldName}{CONNECTION_FLAG_SUFFIX}";

        var emissionBody = new StringBuilder();
        emissionBody.AppendSignalWiring(signalName, parameters.Count);
        emissionBody.AppendInverseSignalWiring(inverseName, parameters, model);

        var source = $$"""
                       // <auto-generated />
                       using Godot;
                       using R3;
                       using System.CodeDom.Compiler;

                       namespace {{ns}};

                       public partial class {{className}} {
                         private readonly Subject<{{parameters.AggregateType}}> {{fieldName}} = new();
                         private bool {{connectedFlag}};
                       
                         [GeneratedCode("SignalObservableGenerator", "1.0.0")]
                         public Observable<{{parameters.AggregateType}}> {{propertyName}} {
                           get {
                             if (!{{connectedFlag}}) {
                               {{connectedFlag}} = true;
                               {{fieldName}}.Subscribe(value => {
                                 {{emissionBody.ToString().Trim()}}
                               }).AddTo(this);
                             }
                             return {{fieldName}};
                           }
                         }
                       }
                       """;

        context.AddSource($"{className}.{propertyName}.g.cs", SourceText.From(source, Encoding.UTF8));
    }
}