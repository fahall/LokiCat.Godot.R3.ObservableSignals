using System.Text;
using LokiCat.Godot.R3.ObservableSignals.ObservableGenerator.Features.SyntaxHelpers;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace LokiCat.Godot.R3.ObservableSignals.ObservableGenerator.Features.Generators;

internal static class RxPropertyGenerator
{
  private const string PUBLIC_PREFIX = "Is";
  private const string PRIVATE_PREFIX = "_is";
  private const string CONNECTION_FLAG_SUFFIX = "Connected";
  
  internal static void Emit(
    GeneratorExecutionContext context,
    string className,
    string nameSpace,
    string delegateName,
    ParameterDefinition parameters,
    string? inverseName,
    SemanticModel model)
  {
    
    context.ReportDiagnostic(Diagnostic.Create(
                               new DiagnosticDescriptor(
                                 "DEBUGPROP",
                                 "Debug",
                                 "Generating RxProp for: {0}",
                                 "Debug",
                                 DiagnosticSeverity.Info,
                                 true),
                               Location.None,
                               delegateName));
    
    var signalBaseName = GodotSignalUtilities.GetSignalBaseName(delegateName);
    var propertyName = signalBaseName.WithDedupedPrefix(PUBLIC_PREFIX);
    var fieldName = signalBaseName.WithDedupedPrefix(PRIVATE_PREFIX);
    var connectedFlag = $"{fieldName}{CONNECTION_FLAG_SUFFIX}";

    var emissionBody = new StringBuilder();
    emissionBody.AppendSignalWiring(signalBaseName, parameters.Count);
    emissionBody.AppendInverseSignalWiring(inverseName, parameters, model);


    var source = $$"""
                   // <auto-generated />
                   using Godot;
                   using R3;
                   using System.CodeDom.Compiler;
                   using LokiCat.Godot.R3.RxProps;

                   nameSpace {{nameSpace}};

                   public partial class {{className}} {
                     private readonly IRxVar<{{parameters.AggregateType}}> {{fieldName}} = new RxVar<{{parameters.AggregateType}}>();
                     private bool {{connectedFlag}};

                     [GeneratedCode("SignalObservableGenerator", "1.0.0")]
                     public IRxProp<{{parameters.AggregateType}}> {{propertyName}} {
                       get {
                         if (!{{connectedFlag}}) {
                           {{connectedFlag}} = true;
                           {{fieldName}}.AsObservable()
                             .Skip(1)
                             .Subscribe(value => {
                               {{emissionBody.ToString().Trim()}}
                             })
                             .AddTo(this);
                         }
                         return {{fieldName}};
                       }
                     }
                   }
                   """;

    context.AddSource($"{className}.{propertyName}.g.cs", SourceText.From(source, Encoding.UTF8));
  }
}
