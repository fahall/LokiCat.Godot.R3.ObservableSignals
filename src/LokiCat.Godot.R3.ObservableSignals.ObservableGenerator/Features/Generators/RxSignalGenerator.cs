// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using LokiCat.Godot.R3.ObservableSignals.ObservableGenerator.Features.SyntaxHelpers;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace LokiCat.Godot.R3.ObservableSignals.ObservableGenerator.Features.Generators;

[Generator]
public sealed class RxSignalGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var fields = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (s, _) =>
                    s is FieldDeclarationSyntax fieldDecl &&
                    fieldDecl.AttributeLists
                             .SelectMany(a => a.Attributes)
                             .Any(attr => attr.Name.ToString().EndsWith("RxSignal")),
                transform: static (ctx, _) => (FieldDeclarationSyntax)ctx.Node
            )
            .Where(static f => f is not null);

        var compilationAndFields = context.CompilationProvider.Combine(fields.Collect());

        context.RegisterSourceOutput(compilationAndFields, static (spc, source) =>
        {
            var (compilation, fieldList) = source;
            Execute(compilation, fieldList, spc);
        });
    }

private static void Execute(Compilation compilation, IReadOnlyList<FieldDeclarationSyntax> fields, SourceProductionContext context)
{
    AddRxSignalAttributeSource(context);

    var modelCache = new Dictionary<SyntaxTree, SemanticModel>();

    foreach (var field in fields)
    {
        var location = field.GetLocation().GetLineSpan();
        context.AddSource($"FieldSeen_{location.Path.GetHashCode()}_{location.StartLinePosition.Line}.g.cs",
                          $"// Found RxSignal field at {location.Path}:{location.StartLinePosition.Line}");
    }
    
    foreach (var group in fields.GroupBy(f => f.FirstAncestorOrSelf<ClassDeclarationSyntax>()))
    {
        if (group.Key is null)
            continue;

        var classDecl = group.Key;
        var namespaceName = Namespace.GetNamespace(classDecl);
        var className = classDecl.Identifier.Text;
        var builder = new StringBuilder();
        var generatedSomething = false;

        builder.AppendLine($$"""
// <auto-generated />
using Godot;
using R3;
using System.CodeDom.Compiler;

namespace {{namespaceName}};

public partial class {{className}}
{
""");

        foreach (var field in group)
        {
            if (!modelCache.TryGetValue(field.SyntaxTree, out var model))
            {
                model = compilation.GetSemanticModel(field.SyntaxTree);
                modelCache[field.SyntaxTree] = model;
            }

            var fieldSymbol = model.GetDeclaredSymbol(field.Declaration.Variables.First()) as IFieldSymbol;
            if (fieldSymbol == null)
                continue;

            // 🔍 Add this block to log type info and observable compatibility
            context.AddSource($"Debug_FieldSymbol_{fieldSymbol.Name}.g.cs", $$"""
                                                                              // field name: {{fieldSymbol.Name}}
                                                                              // type: {{fieldSymbol.Type.ToDisplayString()}}
                                                                              // observable? {{IsObservableType(fieldSymbol.Type)}}
                                                                              """);

            // 🔍 Add this block to verify the RxSignalAttribute is detected
            var hasRxSignal = fieldSymbol.GetAttributes()
                                         .Any(attr => attr.AttributeClass?.ToDisplayString() == "LokiCat.Godot.R3.ObservableSignals.RxSignalAttribute");

            context.AddSource($

            if (!hasRxSignal)
                continue;

            if (!IsObservableType(fieldSymbol.Type))
            {
                context.ReportDiagnostic(Diagnostic.Create(
                    new DiagnosticDescriptor(
                        id: "RXSG0002",
                        title: "Invalid RxSignal field",
                        messageFormat: $"Field '{fieldSymbol.Name}' must be assignable to Observable<T>.",
                        category: nameof(RxSignalGenerator),
                        DiagnosticSeverity.Warning,
                        isEnabledByDefault: true
                    ), fieldSymbol.Locations.FirstOrDefault()));
                continue;
            }

            generatedSomething = true;

            var fieldName = fieldSymbol.Name;
            var baseName = ToSignalName(fieldName);
            var signalName = baseName;
            var delegateName = $"{baseName}EventHandler";
            var propertyName = $"On{baseName}";

            var typeArg = GetObservableTypeArg(fieldSymbol.Type);

            var signalParams = typeArg is null || typeArg.Name == "Unit"
                ? ""
                : $"{typeArg.ToDisplayString()} value";

            var emitArgs = typeArg is null || typeArg.Name == "Unit"
                ? ""
                : "value";

            builder.AppendLine($$"""
    /// <summary>
    /// Godot signal emitted by {{propertyName}}.
    /// </summary>
    [Signal]
    public delegate void {{delegateName}}({{signalParams}});

    private bool _{{baseName}}Connected = false;

    private void Ensure{{baseName}}Connected()
    {
        if (_{{baseName}}Connected) return;
        _{{baseName}}Connected = true;
        {{fieldName}}.Subscribe(value => EmitSignal(nameof({{signalName}}){{(emitArgs == "" ? "" : $", {emitArgs}")}})).AddTo(this);
    }

    /// <summary>
    /// Observable that emits when the {{signalName}} Godot signal is triggered.
    /// </summary>
    [GeneratedCode("RxSignalGenerator", "1.0.0")]
    public Observable<{{typeArg?.ToDisplayString() ?? "Unit"}}> {{propertyName}}
    {
        get
        {
            Ensure{{baseName}}Connected();
            return {{fieldName}};
        }
    }

""");
        }

        builder.AppendLine("}");

        if (generatedSomething)
        {
            context.AddSource($"{className}.RxSignals.g.cs", builder.ToString());
        }
    }
}

private static ITypeSymbol? GetObservableTypeArg(ITypeSymbol type)
{
    if (type is INamedTypeSymbol named && named.TypeArguments.Length == 1)
        return named.TypeArguments[0];

    return null;
}

    private static bool IsObservableType(ITypeSymbol type)
    {
        // Traverse base types until we find Observable<T>
        while (type is { } current)
        {
            if (current is INamedTypeSymbol named &&
                named.ConstructedFrom.ToDisplayString().StartsWith("R3.Observable<"))
                return true;

            type = current.BaseType;
        }

        return false;
    }
    
    private static string ToSignalName(string fieldName)
    {
        if (fieldName.StartsWith("_on"))
            fieldName = fieldName.Substring(3);
        else if (fieldName.StartsWith("_"))
            fieldName = fieldName.Substring(1);

        return char.ToUpperInvariant(fieldName[0]) + fieldName.Substring(1);
    }

    private static void AddRxSignalAttributeSource(SourceProductionContext context)
    {
        const string source = """
        // <auto-generated />
        using System;

        namespace LokiCat.Godot.R3.ObservableSignals
        {
            [AttributeUsage(AttributeTargets.Field)]
            public sealed class RxSignalAttribute : Attribute
            {
                public RxSignalAttribute() { }
            }
        }
        """;

        context.AddSource("RxSignalAttribute.g.cs", source);
    }
}