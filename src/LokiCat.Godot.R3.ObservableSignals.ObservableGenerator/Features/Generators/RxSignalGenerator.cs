// RxSignalGenerator.cs

using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace LokiCat.Godot.R3.ObservableSignals.ObservableGenerator.Generators;

[Generator]
public sealed class RxSignalGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context) { }

    public void Execute(GeneratorExecutionContext context)
    {
        foreach (var tree in context.Compilation.SyntaxTrees)
        {
            var root = tree.GetRoot();

            var classDeclarations = root.DescendantNodes().OfType<ClassDeclarationSyntax>();

            foreach (var classDecl in classDeclarations)
            {
                var signalFields = classDecl.Members
                    .OfType<FieldDeclarationSyntax>()
                    .Where(field => field.AttributeLists
                        .SelectMany(a => a.Attributes)
                        .Any(attr => attr.Name.ToString().Contains("RxSignal")))
                    .ToList();

                if (signalFields.Count > 0)
                {
                    ProcessClass(context, classDecl, signalFields);
                }
            }
        }
    }

    private static void ProcessClass(GeneratorExecutionContext context, ClassDeclarationSyntax classDecl, List<FieldDeclarationSyntax> signalFields)
    {
        var namespaceName = GetNamespace(classDecl);
        var className = classDecl.Identifier.Text;

        var builder = new StringBuilder();

        builder.AppendLine("// <auto-generated />");
        builder.AppendLine("using Godot;");
        builder.AppendLine("using R3;");
        builder.AppendLine();
        builder.AppendLine("namespace " + namespaceName + ";");
        builder.AppendLine();
        builder.AppendLine("public partial class " + className);
        builder.AppendLine("{");

        foreach (var field in signalFields)
        {
            var fieldName = field.Declaration.Variables.First().Identifier.Text;
            var signalName = GetSignalName(fieldName);

            builder.AppendLine($"    [Signal]");
            builder.AppendLine($"    public delegate void {signalName}EventHandler();");
            builder.AppendLine();
        }

        builder.AppendLine("    private void ConnectGodotSignals()");
        builder.AppendLine("    {");

        foreach (var field in signalFields)
        {
            var fieldName = field.Declaration.Variables.First().Identifier.Text;
            var propertyName = ToPropertyName(fieldName);
            var signalName = GetSignalName(fieldName);

            builder.AppendLine($"        {propertyName}.Subscribe(v => EmitSignal(nameof({signalName}), v!)).AddTo(this);");
        }

        builder.AppendLine("    }");
        builder.AppendLine("}");

        context.AddSource($"{className}.ObservableSignals.g.cs", builder.ToString());
    }

    private static string GetNamespace(ClassDeclarationSyntax classDecl)
    {
        return classDecl.Ancestors()
            .OfType<NamespaceDeclarationSyntax>()
            .FirstOrDefault()?.Name.ToString() ?? "";
    }

    private static string GetSignalName(string fieldName)
    {
        if (fieldName.StartsWith("_on"))
        {
            return fieldName.Substring(3);
        }

        if (fieldName.StartsWith("on"))
        {
            return fieldName.Substring(2);
        }

        return fieldName;
    }

    private static string ToPropertyName(string fieldName)
    {
        if (fieldName.StartsWith("_"))
        {
            fieldName = fieldName.Substring(1);
        }

        return char.ToUpperInvariant(fieldName[0]) + fieldName.Substring(1);
    }
}

