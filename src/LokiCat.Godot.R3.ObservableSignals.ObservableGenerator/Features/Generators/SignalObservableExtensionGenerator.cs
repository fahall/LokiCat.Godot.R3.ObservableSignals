using Microsoft.CodeAnalysis;

namespace LokiCat.Godot.R3.ObservableSignals.ObservableGenerator.Generators;

public static class SignalObservableExtensionGenerator
{
    public static void EmitSignalObservableExtensions(GeneratorExecutionContext context)
    {
      // NEW: Emit a dummy diagnostic to force this generator to appear
      var descriptor = new DiagnosticDescriptor(
        id: "SOEG0001",
        title: $"{nameof(SignalObservableExtensionGenerator)} Running",
        messageFormat: $"{nameof(SignalObservableExtensionGenerator)} is active in this compilation.",
        category: nameof(SignalObservableExtensionGenerator),
        DiagnosticSeverity.Info,
        isEnabledByDefault: true
      );
        const string extensionSource = """
                                       // <auto-generated />
                                       #nullable enable
                                       using Godot;
                                       using R3;

                                       namespace LokiCat.Godot.R3.ObservableSignals;

                                       public static class SignalObservableExtensions {
                                         public static Observable<Unit> Signal(
                                           this Node node, string signal, ref Observable<Unit>? cache
                                         ) =>
                                           cache ??= Observable.Create<Unit>(observer => {
                                             var callable = Callable.From(() => observer.OnNext(Unit.Default));
                                             node.Connect(signal, callable);
                                             return Disposable.Empty;
                                           });
                                       
                                         public static Observable<T> Signal<T>(
                                           this Node node, string signal, ref Observable<T>? cache
                                         ) where T : GodotObject =>
                                           cache ??= Observable.Create<T>(observer => {
                                             var callable = Callable.From((T arg) => observer.OnNext(arg));
                                             node.Connect(signal, callable);
                                             return Disposable.Empty;
                                           });
                                       
                                         public static Observable<(T1, T2)> Signal<T1, T2>(
                                           this Node node, string signal, ref Observable<(T1, T2)>? cache
                                         ) where T1 : GodotObject where T2 : GodotObject =>
                                           cache ??= Observable.Create<(T1, T2)>(observer => {
                                             var callable = Callable.From((T1 a, T2 b) => observer.OnNext((a, b)));
                                             node.Connect(signal, callable);
                                             return Disposable.Empty;
                                           });
                                       
                                         public static Observable<(T1, T2, T3)> Signal<T1, T2, T3>(
                                           this Node node, string signal, ref Observable<(T1, T2, T3)>? cache
                                         ) where T1 : GodotObject where T2 : GodotObject where T3 : GodotObject =>
                                           cache ??= Observable.Create<(T1, T2, T3)>(observer => {
                                             var callable = Callable.From((T1 a, T2 b, T3 c) => observer.OnNext((a, b, c)));
                                             node.Connect(signal, callable);
                                             return Disposable.Empty;
                                           });
                                       
                                         public static Observable<(T1, T2, T3, T4)> Signal<T1, T2, T3, T4>(
                                           this Node node, string signal, ref Observable<(T1, T2, T3, T4)>? cache
                                         ) where T1 : GodotObject where T2 : GodotObject where T3 : GodotObject where T4 : GodotObject =>
                                           cache ??= Observable.Create<(T1, T2, T3, T4)>(observer => {
                                             var callable = Callable.From((T1 a, T2 b, T3 c, T4 d) => observer.OnNext((a, b, c, d)));
                                             node.Connect(signal, callable);
                                             return Disposable.Empty;
                                           });
                                       
                                         public static Observable<(T1, T2, T3, T4, T5)> Signal<T1, T2, T3, T4, T5>(
                                           this Node node, string signal, ref Observable<(T1, T2, T3, T4, T5)>? cache
                                         ) where T1 : GodotObject where T2 : GodotObject where T3 : GodotObject where T4 : GodotObject where T5 : GodotObject =>
                                           cache ??= Observable.Create<(T1, T2, T3, T4, T5)>(observer => {
                                             var callable = Callable.From((T1 a, T2 b, T3 c, T4 d, T5 e) => observer.OnNext((a, b, c, d, e)));
                                             node.Connect(signal, callable);
                                             return Disposable.Empty;
                                           });
                                       }
                                       """;

        context.AddSource("SignalObservableExtensions.g.cs", extensionSource);
    }
}